// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: [redacted]
// </auto-generated>

using System;
using Google.Protobuf;
using Google.Protobuf.Reflection;

namespace Hi3Helper
{
    public static partial class AReflection
    {
        public static FileDescriptor Descriptor => descriptor;

        private static FileDescriptor descriptor;

        static AReflection()
        {
            byte[] descriptorData = Convert.FromBase64String(
                string.Concat(
                  "Cgxwcm90L2EucHJvdG8ixgYKClF1ZXJ5UHJvdG8SLgoKZGlzcGF0Y2hlchgD",
                  "IAEoCzIaLlF1ZXJ5UHJvdG8uRGlzcGF0Y2hlckluZm8SDAoEa2V5MhgLIAEo",
                  "DBIMCgRrZXkzGAwgASgMGqYBChNEaXNwYXRjaGVyX0ludGVybmFsEhoKEmNs",
                  "aWVudF9nYW1lX3Jlc251bRgBIAEoBRIbChNjbGllbnRfZ2FtZV9yZXNsaXN0",
                  "GAMgASgJEh0KFWNsaWVudF9nYW1lX3Jlc21pbnZlchgEIAEoCRIbChNjbGll",
                  "bnRfZ2FtZV9yZXNoYXNoGAUgASgJEhoKEmNsaWVudF9nYW1lX3Jlc3ZlchgG",
                  "IAEoCRrCBAoORGlzcGF0Y2hlckluZm8SEwoLZ2FtZV9kYXRhaXAYASABKAkS",
                  "FQoNZ2FtZV9kYXRhcG9ydBgCIAEoBRIQCghvYXNlcnZlchgDIAEoCRIWCg5n",
                  "YW1lX2F1ZGlvbGFuZxgHIAEoCRIaChJjbGllbnRfZ2FtZV9yZXN1cmwYCCAB",
                  "KAkSHQoVY2xpZW50X2Rlc2lnbl9kYXRhdXJsGAkgASgJEhUKDWltX3NlcnZp",
                  "Y2V1cmwYCiABKAkSFgoOZ2FtZV92ZXJzdHJpbmcYDCABKAkSHQoVY2xpZW50",
                  "X2Rlc2lnbl9kYXRhbnVtGA4gASgFEiIKGmNsaWVudF9kZXNpZ25fZGF0YW51",
                  "bV9zbG50GBIgASgFEh4KFmNsaWVudF9kZXNpZ25fZGF0YWxpc3QYEyABKAkS",
                  "IwobY2xpZW50X2Rlc2lnbl9kYXRhbGlzdF9zbG50GBQgASgJEjwKE2Rpc3Bh",
                  "dGNoZXJfaW50ZXJuYWwYFiABKAsyHy5RdWVyeVByb3RvLkRpc3BhdGNoZXJf",
                  "SW50ZXJuYWwSDAoEa2V5MRgXIAEoDBIWCg5mcm9udF9ldmVudHVybBgYIAEo",
                  "CRIeChZjbGllbnRfZGVzaWduX2RhdGFoYXNoGBogASgJEiMKG2NsaWVudF9k",
                  "ZXNpZ25fZGF0YWhhc2hfc2xudBgbIAEoCRIYChBhY2NvdW50X2xvZ2ludXJs",
                  "GB8gASgJEhQKDGNka2V5X2FwaXVybBggIAEoCRIPCgdldWxhdXJsGCEgASgJ",
                  "YgZwcm90bzM="));

            descriptor = FileDescriptor.FromGeneratedCode(descriptorData,
                new FileDescriptor[] { },
                new GeneratedClrTypeInfo(null, null, new GeneratedClrTypeInfo[] {
                    new GeneratedClrTypeInfo(typeof(QueryProto), QueryProto.Parser, new[]{ "Dispatcher", "Key2", "Key3" }, null, null, null, new GeneratedClrTypeInfo[] { new GeneratedClrTypeInfo(typeof(QueryProto.Types.Dispatcher_Internal), QueryProto.Types.Dispatcher_Internal.Parser, new[]{ "ClientGameResnum", "ClientGameReslist", "ClientGameResminver", "ClientGameReshash", "ClientGameResver" }, null, null, null, null),
                    new GeneratedClrTypeInfo(typeof(QueryProto.Types.DispatcherInfo), QueryProto.Types.DispatcherInfo.Parser, new[]{ "GameDataip", "GameDataport", "Oaserver", "GameAudiolang", "ClientGameResurl", "ClientDesignDataurl", "ImServiceurl", "GameVerstring", "ClientDesignDatanum", "ClientDesignDatanumSlnt", "ClientDesignDatalist", "ClientDesignDatalistSlnt", "DispatcherInternal", "Key1", "FrontEventurl", "ClientDesignDatahash", "ClientDesignDatahashSlnt", "AccountLoginurl", "CdkeyApiurl", "Eulaurl" }, null, null, null, null)})
                }));
        }
    }

    public sealed partial class QueryProto : IMessage<QueryProto>, IBufferMessage
    {
        private static readonly MessageParser<QueryProto> _parser = new MessageParser<QueryProto>(() => new QueryProto());
        private UnknownFieldSet _unknownFields;

        public static MessageParser<QueryProto> Parser => _parser;

        public static MessageDescriptor Descriptor => AReflection.Descriptor.MessageTypes[0];

        MessageDescriptor IMessage.Descriptor => Descriptor;

        public QueryProto() => OnConstruction();
        partial void OnConstruction();

        public QueryProto(QueryProto other) : this()
        {
            dispatcher_ = other.dispatcher_ != null ? other.dispatcher_.Clone() : null;
            key2_ = other.key2_;
            key3_ = other.key3_;
            _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
        }

        public QueryProto Clone() => new QueryProto(this);

        public const int DispatcherFieldNumber = 3;
        private QueryProto.Types.DispatcherInfo dispatcher_;

        public QueryProto.Types.DispatcherInfo Dispatcher
        {
            get => dispatcher_;
            set
            {
                dispatcher_ = value;
            }
        }

        public const int Key2FieldNumber = 11;
        private ByteString key2_ = ByteString.Empty;

        public ByteString Key2
        {
            get => key2_;
            set
            {
                key2_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        public const int Key3FieldNumber = 12;
        private ByteString key3_ = ByteString.Empty;

        public ByteString Key3
        {
            get => key3_;
            set
            {
                key3_ = ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        public override bool Equals(object other) => Equals(other as QueryProto);

        public bool Equals(QueryProto other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Dispatcher, other.Dispatcher)) return false;
            if (Key2 != other.Key2) return false;
            if (Key3 != other.Key3) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        public override int GetHashCode()
        {
            int hash = 1;
            if (dispatcher_ != null) hash ^= Dispatcher.GetHashCode();
            if (Key2.Length != 0) hash ^= Key2.GetHashCode();
            if (Key3.Length != 0) hash ^= Key3.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        public override string ToString() => JsonFormatter.ToDiagnosticString(this);

        public void WriteTo(CodedOutputStream output) => output.WriteRawMessage(this);

        void IBufferMessage.InternalWriteTo(ref WriteContext output)
        {
            if (dispatcher_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Dispatcher);
            }
            if (Key2.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteBytes(Key2);
            }
            if (Key3.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteBytes(Key3);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(ref output);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            if (dispatcher_ != null)
            {
                size += 1 + CodedOutputStream.ComputeMessageSize(Dispatcher);
            }
            if (Key2.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(Key2);
            }
            if (Key3.Length != 0)
            {
                size += 1 + CodedOutputStream.ComputeBytesSize(Key3);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        public void MergeFrom(QueryProto other)
        {
            if (other == null)
            {
                return;
            }
            if (other.dispatcher_ != null)
            {
                if (dispatcher_ == null)
                {
                    Dispatcher = new QueryProto.Types.DispatcherInfo();
                }
                Dispatcher.MergeFrom(other.Dispatcher);
            }
            if (other.Key2.Length != 0)
            {
                Key2 = other.Key2;
            }
            if (other.Key3.Length != 0)
            {
                Key3 = other.Key3;
            }
            _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        public void MergeFrom(CodedInputStream input)
        {
            input.ReadRawMessage(this);
        }

        void IBufferMessage.InternalMergeFrom(ref ParseContext input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                    case 26:
                        {
                            if (dispatcher_ == null)
                            {
                                Dispatcher = new QueryProto.Types.DispatcherInfo();
                            }
                            input.ReadMessage(Dispatcher);
                            break;
                        }
                    case 90:
                        {
                            Key2 = input.ReadBytes();
                            break;
                        }
                    case 98:
                        {
                            Key3 = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        public static partial class Types
        {
            public sealed partial class Dispatcher_Internal : IMessage<Dispatcher_Internal>, IBufferMessage
            {
                private static readonly MessageParser<Dispatcher_Internal> _parser = new MessageParser<Dispatcher_Internal>(() => new Dispatcher_Internal());
                private UnknownFieldSet _unknownFields;

                public static MessageParser<Dispatcher_Internal> Parser => _parser;

                public static MessageDescriptor Descriptor => QueryProto.Descriptor.NestedTypes[0];

                MessageDescriptor IMessage.Descriptor => Descriptor;

                public Dispatcher_Internal() => OnConstruction();

                partial void OnConstruction();

                public Dispatcher_Internal(Dispatcher_Internal other) : this()
                {
                    clientGameResnum_ = other.clientGameResnum_;
                    clientGameReslist_ = other.clientGameReslist_;
                    clientGameResminver_ = other.clientGameResminver_;
                    clientGameReshash_ = other.clientGameReshash_;
                    clientGameResver_ = other.clientGameResver_;
                    _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
                }

                public Dispatcher_Internal Clone() => new Dispatcher_Internal(this);

                public const int ClientGameResnumFieldNumber = 1;
                private int clientGameResnum_;

                public int ClientGameResnum
                {
                    get => clientGameResnum_;
                    set
                    {
                        clientGameResnum_ = value;
                    }
                }

                public const int ClientGameReslistFieldNumber = 3;
                private string clientGameReslist_ = "";

                public string ClientGameReslist
                {
                    get => clientGameReslist_;
                    set
                    {
                        clientGameReslist_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientGameResminverFieldNumber = 4;
                private string clientGameResminver_ = "";

                public string ClientGameResminver
                {
                    get => clientGameResminver_;
                    set
                    {
                        clientGameResminver_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientGameReshashFieldNumber = 5;
                private string clientGameReshash_ = "";

                public string ClientGameReshash
                {
                    get => clientGameReshash_;
                    set
                    {
                        clientGameReshash_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientGameResverFieldNumber = 6;
                private string clientGameResver_ = "";

                public string ClientGameResver
                {
                    get => clientGameResver_;
                    set
                    {
                        clientGameResver_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public override bool Equals(object other) => Equals(other as Dispatcher_Internal);

                public bool Equals(Dispatcher_Internal other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (ClientGameResnum != other.ClientGameResnum) return false;
                    if (ClientGameReslist != other.ClientGameReslist) return false;
                    if (ClientGameResminver != other.ClientGameResminver) return false;
                    if (ClientGameReshash != other.ClientGameReshash) return false;
                    if (ClientGameResver != other.ClientGameResver) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (ClientGameResnum != 0) hash ^= ClientGameResnum.GetHashCode();
                    if (ClientGameReslist.Length != 0) hash ^= ClientGameReslist.GetHashCode();
                    if (ClientGameResminver.Length != 0) hash ^= ClientGameResminver.GetHashCode();
                    if (ClientGameReshash.Length != 0) hash ^= ClientGameReshash.GetHashCode();
                    if (ClientGameResver.Length != 0) hash ^= ClientGameResver.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                public override string ToString() => JsonFormatter.ToDiagnosticString(this);

                public void WriteTo(CodedOutputStream output) => output.WriteRawMessage(this);

                void IBufferMessage.InternalWriteTo(ref WriteContext output)
                {
                    if (ClientGameResnum != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteInt32(ClientGameResnum);
                    }
                    if (ClientGameReslist.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(ClientGameReslist);
                    }
                    if (ClientGameResminver.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(ClientGameResminver);
                    }
                    if (ClientGameReshash.Length != 0)
                    {
                        output.WriteRawTag(42);
                        output.WriteString(ClientGameReshash);
                    }
                    if (ClientGameResver.Length != 0)
                    {
                        output.WriteRawTag(50);
                        output.WriteString(ClientGameResver);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(ref output);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (ClientGameResnum != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeInt32Size(ClientGameResnum);
                    }
                    if (ClientGameReslist.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientGameReslist);
                    }
                    if (ClientGameResminver.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientGameResminver);
                    }
                    if (ClientGameReshash.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientGameReshash);
                    }
                    if (ClientGameResver.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientGameResver);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                public void MergeFrom(Dispatcher_Internal other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.ClientGameResnum != 0)
                    {
                        ClientGameResnum = other.ClientGameResnum;
                    }
                    if (other.ClientGameReslist.Length != 0)
                    {
                        ClientGameReslist = other.ClientGameReslist;
                    }
                    if (other.ClientGameResminver.Length != 0)
                    {
                        ClientGameResminver = other.ClientGameResminver;
                    }
                    if (other.ClientGameReshash.Length != 0)
                    {
                        ClientGameReshash = other.ClientGameReshash;
                    }
                    if (other.ClientGameResver.Length != 0)
                    {
                        ClientGameResver = other.ClientGameResver;
                    }
                    _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                public void MergeFrom(CodedInputStream input) => input.ReadRawMessage(this);

                void IBufferMessage.InternalMergeFrom(ref ParseContext input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                                break;
                            case 8:
                                {
                                    ClientGameResnum = input.ReadInt32();
                                    break;
                                }
                            case 26:
                                {
                                    ClientGameReslist = input.ReadString();
                                    break;
                                }
                            case 34:
                                {
                                    ClientGameResminver = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    ClientGameReshash = input.ReadString();
                                    break;
                                }
                            case 50:
                                {
                                    ClientGameResver = input.ReadString();
                                    break;
                                }
                        }
                    }
                }
            }

            public sealed partial class DispatcherInfo : IMessage<DispatcherInfo>, IBufferMessage
            {
                private static readonly MessageParser<DispatcherInfo> _parser = new MessageParser<DispatcherInfo>(() => new DispatcherInfo());
                private UnknownFieldSet _unknownFields;

                public static MessageParser<DispatcherInfo> Parser => _parser;

                public static MessageDescriptor Descriptor => QueryProto.Descriptor.NestedTypes[1];

                MessageDescriptor IMessage.Descriptor => Descriptor;

                public DispatcherInfo() => OnConstruction();

                partial void OnConstruction();

                public DispatcherInfo(DispatcherInfo other) : this()
                {
                    gameDataip_ = other.gameDataip_;
                    gameDataport_ = other.gameDataport_;
                    oaserver_ = other.oaserver_;
                    gameAudiolang_ = other.gameAudiolang_;
                    clientGameResurl_ = other.clientGameResurl_;
                    clientDesignDataurl_ = other.clientDesignDataurl_;
                    imServiceurl_ = other.imServiceurl_;
                    gameVerstring_ = other.gameVerstring_;
                    clientDesignDatanum_ = other.clientDesignDatanum_;
                    clientDesignDatanumSlnt_ = other.clientDesignDatanumSlnt_;
                    clientDesignDatalist_ = other.clientDesignDatalist_;
                    clientDesignDatalistSlnt_ = other.clientDesignDatalistSlnt_;
                    dispatcherInternal_ = other.dispatcherInternal_ != null ? other.dispatcherInternal_.Clone() : null;
                    key1_ = other.key1_;
                    frontEventurl_ = other.frontEventurl_;
                    clientDesignDatahash_ = other.clientDesignDatahash_;
                    clientDesignDatahashSlnt_ = other.clientDesignDatahashSlnt_;
                    accountLoginurl_ = other.accountLoginurl_;
                    cdkeyApiurl_ = other.cdkeyApiurl_;
                    eulaurl_ = other.eulaurl_;
                    _unknownFields = UnknownFieldSet.Clone(other._unknownFields);
                }

                public DispatcherInfo Clone() => new DispatcherInfo(this);

                public const int GameDataipFieldNumber = 1;
                private string gameDataip_ = "";

                public string GameDataip
                {
                    get => gameDataip_;
                    set
                    {
                        gameDataip_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int GameDataportFieldNumber = 2;
                private int gameDataport_;

                public int GameDataport
                {
                    get => gameDataport_;
                    set
                    {
                        gameDataport_ = value;
                    }
                }

                public const int OaserverFieldNumber = 3;
                private string oaserver_ = "";

                public string Oaserver
                {
                    get => oaserver_;
                    set
                    {
                        oaserver_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int GameAudiolangFieldNumber = 7;
                private string gameAudiolang_ = "";

                public string GameAudiolang
                {
                    get => gameAudiolang_;
                    set
                    {
                        gameAudiolang_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientGameResurlFieldNumber = 8;
                private string clientGameResurl_ = "";

                public string ClientGameResurl
                {
                    get => clientGameResurl_;
                    set
                    {
                        clientGameResurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientDesignDataurlFieldNumber = 9;
                private string clientDesignDataurl_ = "";

                public string ClientDesignDataurl
                {
                    get => clientDesignDataurl_;
                    set
                    {
                        clientDesignDataurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ImServiceurlFieldNumber = 10;
                private string imServiceurl_ = "";

                public string ImServiceurl
                {
                    get => imServiceurl_;
                    set
                    {
                        imServiceurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int GameVerstringFieldNumber = 12;
                private string gameVerstring_ = "";

                public string GameVerstring
                {
                    get => gameVerstring_;
                    set
                    {
                        gameVerstring_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientDesignDatanumFieldNumber = 14;
                private int clientDesignDatanum_;

                public int ClientDesignDatanum
                {
                    get => clientDesignDatanum_;
                    set
                    {
                        clientDesignDatanum_ = value;
                    }
                }

                public const int ClientDesignDatanumSlntFieldNumber = 18;
                private int clientDesignDatanumSlnt_;

                public int ClientDesignDatanumSlnt
                {
                    get => clientDesignDatanumSlnt_;
                    set
                    {
                        clientDesignDatanumSlnt_ = value;
                    }
                }

                public const int ClientDesignDatalistFieldNumber = 19;
                private string clientDesignDatalist_ = "";

                public string ClientDesignDatalist
                {
                    get => clientDesignDatalist_;
                    set
                    {
                        clientDesignDatalist_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientDesignDatalistSlntFieldNumber = 20;
                private string clientDesignDatalistSlnt_ = "";

                public string ClientDesignDatalistSlnt
                {
                    get => clientDesignDatalistSlnt_;
                    set
                    {
                        clientDesignDatalistSlnt_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int DispatcherInternalFieldNumber = 22;
                private QueryProto.Types.Dispatcher_Internal dispatcherInternal_;


                public QueryProto.Types.Dispatcher_Internal DispatcherInternal
                {
                    get => dispatcherInternal_;
                    set
                    {
                        dispatcherInternal_ = value;
                    }
                }

                public const int Key1FieldNumber = 23;
                private ByteString key1_ = ByteString.Empty;


                public ByteString Key1
                {
                    get => key1_;
                    set
                    {
                        key1_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int FrontEventurlFieldNumber = 24;
                private string frontEventurl_ = "";


                public string FrontEventurl
                {
                    get => frontEventurl_;
                    set
                    {
                        frontEventurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientDesignDatahashFieldNumber = 26;
                private string clientDesignDatahash_ = "";


                public string ClientDesignDatahash
                {
                    get => clientDesignDatahash_;
                    set
                    {
                        clientDesignDatahash_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int ClientDesignDatahashSlntFieldNumber = 27;
                private string clientDesignDatahashSlnt_ = "";


                public string ClientDesignDatahashSlnt
                {
                    get => clientDesignDatahashSlnt_;
                    set
                    {
                        clientDesignDatahashSlnt_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int AccountLoginurlFieldNumber = 31;
                private string accountLoginurl_ = "";


                public string AccountLoginurl
                {
                    get => accountLoginurl_;
                    set
                    {
                        accountLoginurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int CdkeyApiurlFieldNumber = 32;
                private string cdkeyApiurl_ = "";


                public string CdkeyApiurl
                {
                    get => cdkeyApiurl_;
                    set
                    {
                        cdkeyApiurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public const int EulaurlFieldNumber = 33;
                private string eulaurl_ = "";

                public string Eulaurl
                {
                    get => eulaurl_;
                    set
                    {
                        eulaurl_ = ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public override bool Equals(object other) => Equals(other as DispatcherInfo);

                public bool Equals(DispatcherInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (GameDataip != other.GameDataip) return false;
                    if (GameDataport != other.GameDataport) return false;
                    if (Oaserver != other.Oaserver) return false;
                    if (GameAudiolang != other.GameAudiolang) return false;
                    if (ClientGameResurl != other.ClientGameResurl) return false;
                    if (ClientDesignDataurl != other.ClientDesignDataurl) return false;
                    if (ImServiceurl != other.ImServiceurl) return false;
                    if (GameVerstring != other.GameVerstring) return false;
                    if (ClientDesignDatanum != other.ClientDesignDatanum) return false;
                    if (ClientDesignDatanumSlnt != other.ClientDesignDatanumSlnt) return false;
                    if (ClientDesignDatalist != other.ClientDesignDatalist) return false;
                    if (ClientDesignDatalistSlnt != other.ClientDesignDatalistSlnt) return false;
                    if (!object.Equals(DispatcherInternal, other.DispatcherInternal)) return false;
                    if (Key1 != other.Key1) return false;
                    if (FrontEventurl != other.FrontEventurl) return false;
                    if (ClientDesignDatahash != other.ClientDesignDatahash) return false;
                    if (ClientDesignDatahashSlnt != other.ClientDesignDatahashSlnt) return false;
                    if (AccountLoginurl != other.AccountLoginurl) return false;
                    if (CdkeyApiurl != other.CdkeyApiurl) return false;
                    if (Eulaurl != other.Eulaurl) return false;
                    return Equals(_unknownFields, other._unknownFields);
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (GameDataip.Length != 0) hash ^= GameDataip.GetHashCode();
                    if (GameDataport != 0) hash ^= GameDataport.GetHashCode();
                    if (Oaserver.Length != 0) hash ^= Oaserver.GetHashCode();
                    if (GameAudiolang.Length != 0) hash ^= GameAudiolang.GetHashCode();
                    if (ClientGameResurl.Length != 0) hash ^= ClientGameResurl.GetHashCode();
                    if (ClientDesignDataurl.Length != 0) hash ^= ClientDesignDataurl.GetHashCode();
                    if (ImServiceurl.Length != 0) hash ^= ImServiceurl.GetHashCode();
                    if (GameVerstring.Length != 0) hash ^= GameVerstring.GetHashCode();
                    if (ClientDesignDatanum != 0) hash ^= ClientDesignDatanum.GetHashCode();
                    if (ClientDesignDatanumSlnt != 0) hash ^= ClientDesignDatanumSlnt.GetHashCode();
                    if (ClientDesignDatalist.Length != 0) hash ^= ClientDesignDatalist.GetHashCode();
                    if (ClientDesignDatalistSlnt.Length != 0) hash ^= ClientDesignDatalistSlnt.GetHashCode();
                    if (dispatcherInternal_ != null) hash ^= DispatcherInternal.GetHashCode();
                    if (Key1.Length != 0) hash ^= Key1.GetHashCode();
                    if (FrontEventurl.Length != 0) hash ^= FrontEventurl.GetHashCode();
                    if (ClientDesignDatahash.Length != 0) hash ^= ClientDesignDatahash.GetHashCode();
                    if (ClientDesignDatahashSlnt.Length != 0) hash ^= ClientDesignDatahashSlnt.GetHashCode();
                    if (AccountLoginurl.Length != 0) hash ^= AccountLoginurl.GetHashCode();
                    if (CdkeyApiurl.Length != 0) hash ^= CdkeyApiurl.GetHashCode();
                    if (Eulaurl.Length != 0) hash ^= Eulaurl.GetHashCode();
                    if (_unknownFields != null)
                    {
                        hash ^= _unknownFields.GetHashCode();
                    }
                    return hash;
                }

                public override string ToString() => JsonFormatter.ToDiagnosticString(this);

                public void WriteTo(CodedOutputStream output) => output.WriteRawMessage(this);

                void IBufferMessage.InternalWriteTo(ref WriteContext output)
                {
                    if (GameDataip.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(GameDataip);
                    }
                    if (GameDataport != 0)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(GameDataport);
                    }
                    if (Oaserver.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(Oaserver);
                    }
                    if (GameAudiolang.Length != 0)
                    {
                        output.WriteRawTag(58);
                        output.WriteString(GameAudiolang);
                    }
                    if (ClientGameResurl.Length != 0)
                    {
                        output.WriteRawTag(66);
                        output.WriteString(ClientGameResurl);
                    }
                    if (ClientDesignDataurl.Length != 0)
                    {
                        output.WriteRawTag(74);
                        output.WriteString(ClientDesignDataurl);
                    }
                    if (ImServiceurl.Length != 0)
                    {
                        output.WriteRawTag(82);
                        output.WriteString(ImServiceurl);
                    }
                    if (GameVerstring.Length != 0)
                    {
                        output.WriteRawTag(98);
                        output.WriteString(GameVerstring);
                    }
                    if (ClientDesignDatanum != 0)
                    {
                        output.WriteRawTag(112);
                        output.WriteInt32(ClientDesignDatanum);
                    }
                    if (ClientDesignDatanumSlnt != 0)
                    {
                        output.WriteRawTag(144, 1);
                        output.WriteInt32(ClientDesignDatanumSlnt);
                    }
                    if (ClientDesignDatalist.Length != 0)
                    {
                        output.WriteRawTag(154, 1);
                        output.WriteString(ClientDesignDatalist);
                    }
                    if (ClientDesignDatalistSlnt.Length != 0)
                    {
                        output.WriteRawTag(162, 1);
                        output.WriteString(ClientDesignDatalistSlnt);
                    }
                    if (dispatcherInternal_ != null)
                    {
                        output.WriteRawTag(178, 1);
                        output.WriteMessage(DispatcherInternal);
                    }
                    if (Key1.Length != 0)
                    {
                        output.WriteRawTag(186, 1);
                        output.WriteBytes(Key1);
                    }
                    if (FrontEventurl.Length != 0)
                    {
                        output.WriteRawTag(194, 1);
                        output.WriteString(FrontEventurl);
                    }
                    if (ClientDesignDatahash.Length != 0)
                    {
                        output.WriteRawTag(210, 1);
                        output.WriteString(ClientDesignDatahash);
                    }
                    if (ClientDesignDatahashSlnt.Length != 0)
                    {
                        output.WriteRawTag(218, 1);
                        output.WriteString(ClientDesignDatahashSlnt);
                    }
                    if (AccountLoginurl.Length != 0)
                    {
                        output.WriteRawTag(250, 1);
                        output.WriteString(AccountLoginurl);
                    }
                    if (CdkeyApiurl.Length != 0)
                    {
                        output.WriteRawTag(130, 2);
                        output.WriteString(CdkeyApiurl);
                    }
                    if (Eulaurl.Length != 0)
                    {
                        output.WriteRawTag(138, 2);
                        output.WriteString(Eulaurl);
                    }
                    if (_unknownFields != null)
                    {
                        _unknownFields.WriteTo(ref output);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (GameDataip.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(GameDataip);
                    }
                    if (GameDataport != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeInt32Size(GameDataport);
                    }
                    if (Oaserver.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(Oaserver);
                    }
                    if (GameAudiolang.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(GameAudiolang);
                    }
                    if (ClientGameResurl.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientGameResurl);
                    }
                    if (ClientDesignDataurl.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ClientDesignDataurl);
                    }
                    if (ImServiceurl.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(ImServiceurl);
                    }
                    if (GameVerstring.Length != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeStringSize(GameVerstring);
                    }
                    if (ClientDesignDatanum != 0)
                    {
                        size += 1 + CodedOutputStream.ComputeInt32Size(ClientDesignDatanum);
                    }
                    if (ClientDesignDatanumSlnt != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeInt32Size(ClientDesignDatanumSlnt);
                    }
                    if (ClientDesignDatalist.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(ClientDesignDatalist);
                    }
                    if (ClientDesignDatalistSlnt.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(ClientDesignDatalistSlnt);
                    }
                    if (dispatcherInternal_ != null)
                    {
                        size += 2 + CodedOutputStream.ComputeMessageSize(DispatcherInternal);
                    }
                    if (Key1.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeBytesSize(Key1);
                    }
                    if (FrontEventurl.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(FrontEventurl);
                    }
                    if (ClientDesignDatahash.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(ClientDesignDatahash);
                    }
                    if (ClientDesignDatahashSlnt.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(ClientDesignDatahashSlnt);
                    }
                    if (AccountLoginurl.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(AccountLoginurl);
                    }
                    if (CdkeyApiurl.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(CdkeyApiurl);
                    }
                    if (Eulaurl.Length != 0)
                    {
                        size += 2 + CodedOutputStream.ComputeStringSize(Eulaurl);
                    }
                    if (_unknownFields != null)
                    {
                        size += _unknownFields.CalculateSize();
                    }
                    return size;
                }

                public void MergeFrom(DispatcherInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.GameDataip.Length != 0)
                    {
                        GameDataip = other.GameDataip;
                    }
                    if (other.GameDataport != 0)
                    {
                        GameDataport = other.GameDataport;
                    }
                    if (other.Oaserver.Length != 0)
                    {
                        Oaserver = other.Oaserver;
                    }
                    if (other.GameAudiolang.Length != 0)
                    {
                        GameAudiolang = other.GameAudiolang;
                    }
                    if (other.ClientGameResurl.Length != 0)
                    {
                        ClientGameResurl = other.ClientGameResurl;
                    }
                    if (other.ClientDesignDataurl.Length != 0)
                    {
                        ClientDesignDataurl = other.ClientDesignDataurl;
                    }
                    if (other.ImServiceurl.Length != 0)
                    {
                        ImServiceurl = other.ImServiceurl;
                    }
                    if (other.GameVerstring.Length != 0)
                    {
                        GameVerstring = other.GameVerstring;
                    }
                    if (other.ClientDesignDatanum != 0)
                    {
                        ClientDesignDatanum = other.ClientDesignDatanum;
                    }
                    if (other.ClientDesignDatanumSlnt != 0)
                    {
                        ClientDesignDatanumSlnt = other.ClientDesignDatanumSlnt;
                    }
                    if (other.ClientDesignDatalist.Length != 0)
                    {
                        ClientDesignDatalist = other.ClientDesignDatalist;
                    }
                    if (other.ClientDesignDatalistSlnt.Length != 0)
                    {
                        ClientDesignDatalistSlnt = other.ClientDesignDatalistSlnt;
                    }
                    if (other.dispatcherInternal_ != null)
                    {
                        if (dispatcherInternal_ == null)
                        {
                            DispatcherInternal = new QueryProto.Types.Dispatcher_Internal();
                        }
                        DispatcherInternal.MergeFrom(other.DispatcherInternal);
                    }
                    if (other.Key1.Length != 0)
                    {
                        Key1 = other.Key1;
                    }
                    if (other.FrontEventurl.Length != 0)
                    {
                        FrontEventurl = other.FrontEventurl;
                    }
                    if (other.ClientDesignDatahash.Length != 0)
                    {
                        ClientDesignDatahash = other.ClientDesignDatahash;
                    }
                    if (other.ClientDesignDatahashSlnt.Length != 0)
                    {
                        ClientDesignDatahashSlnt = other.ClientDesignDatahashSlnt;
                    }
                    if (other.AccountLoginurl.Length != 0)
                    {
                        AccountLoginurl = other.AccountLoginurl;
                    }
                    if (other.CdkeyApiurl.Length != 0)
                    {
                        CdkeyApiurl = other.CdkeyApiurl;
                    }
                    if (other.Eulaurl.Length != 0)
                    {
                        Eulaurl = other.Eulaurl;
                    }
                    _unknownFields = UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                public void MergeFrom(CodedInputStream input) => input.ReadRawMessage(this);

                void IBufferMessage.InternalMergeFrom(ref ParseContext input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                _unknownFields = UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                                break;
                            case 10:
                                {
                                    GameDataip = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    GameDataport = input.ReadInt32();
                                    break;
                                }
                            case 26:
                                {
                                    Oaserver = input.ReadString();
                                    break;
                                }
                            case 58:
                                {
                                    GameAudiolang = input.ReadString();
                                    break;
                                }
                            case 66:
                                {
                                    ClientGameResurl = input.ReadString();
                                    break;
                                }
                            case 74:
                                {
                                    ClientDesignDataurl = input.ReadString();
                                    break;
                                }
                            case 82:
                                {
                                    ImServiceurl = input.ReadString();
                                    break;
                                }
                            case 98:
                                {
                                    GameVerstring = input.ReadString();
                                    break;
                                }
                            case 112:
                                {
                                    ClientDesignDatanum = input.ReadInt32();
                                    break;
                                }
                            case 144:
                                {
                                    ClientDesignDatanumSlnt = input.ReadInt32();
                                    break;
                                }
                            case 154:
                                {
                                    ClientDesignDatalist = input.ReadString();
                                    break;
                                }
                            case 162:
                                {
                                    ClientDesignDatalistSlnt = input.ReadString();
                                    break;
                                }
                            case 178:
                                {
                                    if (dispatcherInternal_ == null)
                                    {
                                        DispatcherInternal = new QueryProto.Types.Dispatcher_Internal();
                                    }
                                    input.ReadMessage(DispatcherInternal);
                                    break;
                                }
                            case 186:
                                {
                                    Key1 = input.ReadBytes();
                                    break;
                                }
                            case 194:
                                {
                                    FrontEventurl = input.ReadString();
                                    break;
                                }
                            case 210:
                                {
                                    ClientDesignDatahash = input.ReadString();
                                    break;
                                }
                            case 218:
                                {
                                    ClientDesignDatahashSlnt = input.ReadString();
                                    break;
                                }
                            case 250:
                                {
                                    AccountLoginurl = input.ReadString();
                                    break;
                                }
                            case 258:
                                {
                                    CdkeyApiurl = input.ReadString();
                                    break;
                                }
                            case 266:
                                {
                                    Eulaurl = input.ReadString();
                                    break;
                                }
                        }
                    }
                }
            }
        }
    }
}